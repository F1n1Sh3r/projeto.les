#Set the log level to (DEBUG, INFO, WARN, ERROR, FATAL) log information output to the console and file destinations
log4j.rootLogger=INFO, stdout, file1, file2
 
 ###Set the log message output to the console ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} - %m%n
 
 ###Set INFO level log messages to be output to the log file info.log every day ###
log4j.appender.file1 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.file1.File = log/tdb.log
log4j.appender.file1.DatePattern = '_'yyyy-MM-dd'.log'
log4j.appender.file1.Append = true
log4j.appender.file1.Threshold = INFO
log4j.appender.file1.layout = org.apache.log4j.PatternLayout
log4j.appender.file1.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} %5p %l - %m%n
 
 ###Set ERROR level log messages to be output to the log file error.log every day ###
log4j.appender.file2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.file2.File = log/error.log
log4j.appender.file2.DatePattern = '_'yyyy-MM-dd'.log'
log4j.appender.file2.Append = true
log4j.appender.file2.Threshold = ERROR
log4j.appender.file2.layout = org.apache.log4j.PatternLayout
log4j.appender.file2.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} %5p %l - %m%n
 
 # %c Output the full name of the class to which the log information belongs 
 # %d Output the date or time of the log time point, the default format is ISO8601, you can also specify the format afterwards, for example: %d{yyy-MM-dd HH:mm:ss}, the output is similar to: 2002-10-18 -22: 10: 28
 # %f Output the class name of the class to which the log information belongs 
 # %l Output the location of the log event, that is, the statement that outputs the log information is in the first few lines of the class it is in 
 # %m Output the information specified in the code, such as message in log(message) 
 # %n output a carriage return and line feed, "rn" for Windows platforms and "n" for Unix platforms 
 # %p Output priority, namely DEBUG, INFO, WARN, ERROR, FATAL. If it is output by calling debug(), it is DEBUG, and so on 
 # %r Output the number of milliseconds it took since the application was started to output the log information 
 # %t output the thread name that generated the log event